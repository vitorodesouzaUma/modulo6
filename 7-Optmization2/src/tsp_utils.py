import json
import os
from matplotlib import pyplot as plt
import numpy as np

def parse_tsp(file_path):
    """ Parses a TSP file into a dictionary of data """

    with open(file_path) as f:
        lines = f.readlines() # list containing lines of file
        # Columns to store data
        columns = []
        # Dictionary to store file structure
        data = {
            "NAME": "",
            "TYPE": "",
            "COMMENT": "",
            "DIMENSION": "",
            "EDGE_WEIGHT_TYPE": ""
        }

        i = 1
        for line in lines:
            line = line.strip()
            match i:
                case 1:
                    data['NAME'] = line
                    i += 1
                case 2:
                    data['TYPE'] = line
                    i += 1
                case 3:
                    data['COMMENT'] = line
                    i += 1
                case 4:
                    data['DIMENSION'] = line
                    i += 1
                case 5:
                    data['EDGE_WEIGHT_TYPE'] = line
                    i += 1
                case 6:
                    i += 1
                case _:
                    if line == "EOF":
                        break
                    columns.append([item.strip() for item in line.split()])

        data["DATA"] = columns

    return data


def sanitize_filename(filename):
    """Replaces invalid file name characters in a string with an underscore."""
    invalid_chars = '<>:"/\\|?*'
    for char in invalid_chars:
        filename = filename.replace(char, '_')
    return filename


def save_ga_parameters(ga_parameters, folder, experiment_name):
    """ Saves the GA parameters to a JSON file"""
    # Ensure the directory exists
    os.makedirs(folder, exist_ok=True)
    filename = os.path.join(folder, f"{experiment_name}_param.json")
    with open(filename, 'w') as f:
        json.dump(ga_parameters, f, indent=4)


def save_history(distance_history, ga_parameters, folder, experiment_name):
    """ Saves the distance history of the algorithm to a PNG file"""
    
    # Ensure the directory exists
    os.makedirs(folder, exist_ok=True)
    filename = os.path.join(folder, f"{experiment_name}_hist.png")
    
    plt.figure(figsize=(15, 8)) 
    
    # Plot the distance history
    plt.plot(distance_history)
    plt.title('TSP Solution Distance over Generations')
    plt.xlabel('Generation')
    plt.ylabel('Distance')
    plt.grid(True)
    
    # Convert GA parameters to a formatted string and add to the plot
    params_text = "\n".join(f"{key}: {value}" for key, value in ga_parameters.items())
    plt.gcf().text(0.7, 0.82, params_text, fontsize=9, verticalalignment='top',horizontalalignment='left',
                   bbox=dict(facecolor='white', edgecolor='black', boxstyle='round,pad=0.5'))
    
    plt.savefig(filename) 
    plt.close()

def plot_path(points,folder, experiment_name):
    """ Saves the the path generated by the algorithm to a PNG file"""

    # Ensure the directory exists
    os.makedirs(folder, exist_ok=True)
    filename = os.path.join(folder, f"{experiment_name}_path.png")

    plt.figure(figsize=(15, 8))
    plt.plot(points[0], points[1], 'o-')
    plt.title('TSP Solution Path')
    plt.xlabel('x')
    plt.ylabel('y')
    plt.grid(True)

    # Starting point (First city)
    plt.plot(points[0][0], points[1][0], 'x', c='g')
    # End point (Last city)
    plt.plot(points[0][-1], points[1][-1], 'x', c='r')

    plt.savefig(filename) 
    plt.close()

def save_solution(best_solution, folder, experiment_name):

    # Ensure the directory exists
    os.makedirs(folder, exist_ok=True)
    filename = os.path.join(folder, f"{experiment_name}_best_solution.txt")
    with open(filename, 'w') as f:
        for gene in best_solution:
            # Write each gene on a new line 
            f.write("%s\n" % gene)

def save_gscv_hist(results, folder):

    # Ensure the directory exists
    os.makedirs(folder, exist_ok=True)
    filename = os.path.join(folder, f"gscv_hist.png")

    # Plotting and printing results
    average_fitnesses = []
    std_devs = []
    labels = []

    # Extract data for plotting
    for param, result in results.items():
        average_fitness = np.mean(result["best_fitnesses"])
        std_dev = np.std(result["best_fitnesses"])
        print(
            f"Average solution for {param}: {average_fitness} with std: {std_dev}"
        )

        average_fitnesses.append(average_fitness)
        std_devs.append(std_dev)
        param_list = [str(item) for item in param]
        labels.append('-'.join(param_list))

    # Plotting
    fig, ax = plt.subplots(figsize=(10, 6))

    # Create bar plot
    x_pos = np.arange(len(labels))
    bars = ax.bar(
        x_pos,
        average_fitnesses,
        yerr=std_devs,
        capsize=5,
        alpha=0.75,
        color="skyblue",
    )

    ax.set_xlabel("Parameter Combination")
    ax.set_ylabel("Average Fitness")
    ax.set_title("Genetic Algorithm Performance")
    ax.set_xticks(x_pos)
    ax.set_xticklabels(labels, rotation=45, ha="right")

    plt.tight_layout()
    plt.show()
    plt.savefig(filename) 
    
